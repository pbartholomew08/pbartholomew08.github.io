#+TITLE: Structure and Interpretation of Computer Programs
#+AUTHOR: Paul Bartholomew
#+DATE: {{{time(%Y-%m-%d)}}}

#+OPTIONS: toc:nil

#+BIBLIOGRAPHY: ../../Bibliography/library.bib
#+CITE_EXPORT: basic numeric numeric

#+begin_quote
Computer science is a terrible name for this business. First of all, it's not a science. ... It's
also not really very much about computers. ... Now, the reason that we think computer science is
about computers is pretty much the same reason that the (Ancient) Egyptians thought geometry was
about surveying instruments; and that is, when some field is just getting started and you don't
really understand it very well, it's very easy to confuse the essence of what you're doing with
the tools that you use. --- Hal Abelson\nbsp[cite:@Abelson1986]
#+end_quote

Structure and Interpretation of Computer Programs, /aka/ SICP,\nbsp[cite:@Abelson1996] is an
often-recommended textbook in computer science that I have meant to work through for some time.
In introducing the subject of the book/course --- /computer science/ --- the authors immediately take
issue with the name as it conflates the subject with the study of computers as objects.
This error in subject matter is clear if we consider that computer science is rooted in the work of
mathematicians[fn:1] that /predates/ modern "computers"[fn:2].

* Communicating methods

#+begin_quote
First, we want to establish the idea that a computer language is not just a way of getting a
computer to perform operations but rather that it is a novel formal medium for expressing ideas
about methodology. ... Second, we believe that the essential material to be addressed by a subject
at this level is not the syntax of particular programming-language constructs, nor clever
algorithms for computing particular functions efficiently, nor even the mathematical analysis of
algorithms and the foundations of computing, but rather the techniques used to control the
intellectual complexity of large software systems. --- Preface to SICP 1^{st} Ed.\nbsp[cite:@Abelson1996]
#+end_quote

SICP proposes that computer science is really the study of how we /instruct/ computers, and that
programming languages are the medium of communicating /how to/ achieve some task.
Experience tells us that clarity is a desirable property of programs - it is a communication problem
after all.
As the ideas communicated grow in complexity, our ability to maintain all the necessary details in
our mind at once becomes the limiting factor and we need some means to simplify our current view of
the problem.
In natural language this simplification is achieved by inventing new words or jargon in, or more
generally by developing /abstractions/, in both cases we are suppressing extraneous details to allow a
broader view of what is being communicated.

** Programming as a tool for thought

#+begin_quote
These processes, arising from human experience and thought, are huge in number, intricate in
detail, and at any time only partially understood. They are modelled to our permanent satisfaction
rarely by our computer programs. Thus even though our programs are carefully handcrafted discrete
collections of symbols, mosaics of interlocking functions, they continually evolve: we change them
as our perception of the model deepens, enlarges, generalizes, until the model ultimately attains
a metastable place within another model with which we struggle. --- Alan J. Perlis, Foreword to
SICP\nbsp[cite:@Abelson1996] 
#+end_quote

Following on from the idea that programming languages enable communicating about methods, and that
handling complexity is at the core of computer science, then the act of /programming/ can be seen as a
tool for thought.
Programming forces us to clarify our ideas, as programming languages will only support precisely
formed statements[fn:3], and allows us to tackle larger problems than we could otherwise by
encouraging the use of abstraction to suppress detail.

* References
:PROPERTIES:
:UNNUMBERED: t
:END:

#+print_bibliography:

* Footnotes

[fn:1] Such as Alonso Church, Barkley Rosser, Stephen Kleene, Haskell Curry and Alan Turing.

[fn:2] The original computers were people [[https://en.wikipedia.org/wiki/Computer_(occupation)]].

[fn:3] If the program is to function correctly.
