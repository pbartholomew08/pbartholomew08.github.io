#+BEGIN_EXPORT html
---
layout: post
title: SICP Lecture 1A - Introduction to Lisp
---
#+END_EXPORT

#+begin_export html
<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
#+end_export

#+begin_quote
Computer science is a terrible name for this business... it's not a science, it's also not really
very much about computers...

--- Hal Abelson
#+end_quote

I've decided that I should put lockdown to good use and work through /Structure and Interpretation of
Computer Programs/, following the book cite:Abelson1996, [[https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/][video lecture series]] and [[https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/lecture-notes/][MIT-OCW lecture
notes]].
[[https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/1a-overview-and-introduction-to-lisp][Lecture 1A]] of the video introduces the course before introducing the Scheme dialect of Lisp,
corresponding to book ยง1.1.1 and MIT-OCW lectures 1 and 2.

* Overview

Computer science is concerned with the study of /processes/, abstract concepts that manipulate and
transform data, and a formalism for their analysis.
To execute a process a set of instructions is required, this /imperative/ or "how to" knowledge is
written down in a /procedure/ and programming languages provide a way to precisely specify
procedures.
This is in contrast with /declarative/ "what is" knowledge, such as
\begin{equation}
  y=\sqrt{x}\ \mbox{is the } y\ \mbox{such that } y^2=x
\end{equation}
defining /what/ a square root is, whereas Heron's method
\begin{align}
  \mbox{While } \left| y^2_n - x \right| &> \varepsilon \\
  y_{n+1} &= \frac{y_n + x/y_n}{2}
\end{align}
describes /how/ to compute a square root.

The goal in analysing processes and the procedures that define them is to be able to design, build
and understand large, complex systems in order to achieve /something/.
Achieving some task may be sufficient, however many problems are so large and costly that the
process evolved by a na\iuml{}ve solution may be impractical to the point of being useless, by developing
tools to study procedures and the processes they yield, computer science atleast makes approaching
such problems possible.
Complexity arises in computer science as a result of the complexity inherent in the system being
modelled.
This is in contrast to physical systems which must work with /real/ components, in computer science
they are built from /idealised/ components about which we know everything
#+begin_quote
the constraints imposed... are the limits of our own minds.

--- Hal Abelson
#+end_quote
As these systems grow larger it becomes necessary to suppress and control the complexity, only by
developing these means of controlling complexity is it possible to study the processes controlling
these systems.

** Methods of abstraction

In SICP, and in some sense computer science, the focus is on developing and applying methods of
abstraction as a core technique in computer science as a means to /suppress detail/ and control
complexity in order to be better able to design and study procedures and the processes they yield.
Three major techniques will be explored:
1) *Black box abstraction* - the idea of taking some complexity and placing the details in a /named/ box
   such that the details needn't be understood, /e.g./ given a procedure for computing square roots
   called ~SQRT~ it can be used as
   \begin{equation}
     x \rightarrow SQRT \rightarrow y=\sqrt{x}
   \end{equation}
   the details of how to compute a square root are suppressed within the ~SQRT~ routine, for the user
   they don't matter.
2) *Conventional interfaces* - provide agreed upon ways to plug things together such as /generic
   operations/ allowing ~(* x (+ a1 a2))~ to be applied to numbers, vectors, signals, /etc./
3) *Metalinguistic abstraction* - developing a /new/ language that is better suited to describing the
   problem at hand helps suppress complexity

* Introduction to Lisp

As stated in \S[[*Overview]] a programming language is really a way to communicate ideas about processes
by writing down procedures; in SICP this is done using the Scheme dialect of Lisp, I'll be using
[[https://www.gnu.org/software/guile/][Guile Scheme]].
How many characters it takes to invert a matrix is irrelevant - how you go about doing so if matrix
inversion was not built into the language is key.

** Elements of a programming language

The elements of a programming language that make it useful for expressing these ideas are its [[*Primitive
 elements][primitive elements]], [[*Means of combination][means of combination]] and [[*Means of abstraction][means of abstraction]].

*** Primitive elements

The primitive elements of a programming language are the data and procedures that are "built in" to
a system, they are themselves a form of /abstraction/ low level details.
For example the symbol ~3~ represents the number three, which in terms of binary bits would be
implemented as ~0000 0011~, the symbol however is generally much easier to work with; likewise, the
symbol ~+~ represents a procedure for performing addition.
In Lisp evaluating a primitive expression simply returns its value, either the number $3$ or the
addition procedure in the above examples; by convention, all expressions in Lisp return a value.

*** Means of combination

Means of combination enable forming /compound/ elements, in Lisp this achieved by /combinations/ which,
using a parenthesised prefix notation represent /application/ of a procedure to some arguments, /e.g./
#+begin_src scheme
  (+ 3 17.4 5)
#+end_src
the first term is the /operator/ and subsequent terms the /operands/.
Evaluating a combination evaluates the operator and operands, returning their values as a procedure
and arguments to which the procedure is applied, respectively, the result of the procedure is
returned as the value of the combination.
By using parenthesised prefix notation it is possible to give the operator an arbitrary length list
of operands, and also to /nest/ combinations unambiguously such as
#+begin_src scheme
  (+ 3 (* 5 7) 8 2)
#+end_src
This can be seen as a notation for tress of procedures and their arguments, with values accumulating
up to the root node to be returned as the value of the evaluated combination.

*** Means of abstraction

Means of combination allow for expressing compound data or procedures, however without being able to
associate a name to them they would have to be written out in full each time they are used.
The ability to name something enables abstraction by putting the object in a box whose name (if well
chosen) tells you what it is, for example in Lisp (specifically Scheme) the area of a
circle of radius 5 could be abstracted as in listing\nbsp[[src:area_circle.scm]], subsequently evaluating
the variable ~a~ would return the area of the circle as its value.
The ~define~ /[[*Special forms][special form]]/ associates the /name/ given as its first argument with the /value/ given
by evaluating its second argument, returning this name-value pairing as a /variable/ - the name is not
evaluated otherwise the created variable would not be named as expected!
This name-value pairing is stored in the environment, essentially a table of name-value pairs (at
the top-level this is the /global environment/).

#+CAPTION: Creating a new variable in Scheme to store the area of a circle
#+NAME: src:area_circle.scm
#+begin_src scheme
  (define a (* 3.14 (* 5 5)))
#+end_src

**** Creating procedures

More powerful still is to capture the /idea/ of how to compute a circle's area in a procedure, rather
than store the area of every possible circle.
Listing\nbsp[[src:circle_area.scm]] shows how this can be done in Scheme; this actually makes use of some
/syntactic sugar/, explained below.

#+CAPTION: Creating a procedure in Scheme to compute the area of a circle
#+NAME: src:circle_area.scm
#+begin_src scheme
  (define (circle-area r)
    (* 3.14 (* r r)))
#+end_src

What is actually happening in listing\nbsp[[src:circle_area.scm]] is a procedure is being created as the
object to be paired with the name given in the first operand - a list of the procedure name and its
/formal parameters/ - this is made more clear by the equivalent definition given in
listing\nbsp[[src:circle_area_lambda.scm]], where the ~lambda~ special form is Lisp's method for creating
procedures following the syntax shown in listing\nbsp[[src:lambda.scm]].
Evaluating a ~lambda~ [[*Special forms][special form]] /returns a procedure as its value/, neither the formal parameters nor
the body are evaluated at this time; /crucially/ these user-defined procedures are indistinguishable
from built-in procedures.

#+CAPTION: Explicitly naming a procedure in Scheme to compute the area of a circle
#+NAME: src:circle_area_lambda.scm
#+begin_src scheme
  (define circle-area (lambda (r)
                        (* 3.14 (* r r))))
#+end_src

#+CAPTION: The syntax of the ~lambda~ special form.
#+NAME: src:lambda.scm
#+begin_src scheme
  (lambda (<formal parameters>)
    <body>)
#+end_src

*** Special forms

Special forms do not follow the usual evaluation rules, rather they follow their own specific rules
such as the ~define~ and ~lambda~ forms introduced above.

*** Case analysis

Case analysis enables testing a condition by evaluating a /predicate/ and performing different actions
(the /consequent/ or /alternate/) based on the truth value of the predicate, typically this takes the form of
an ~if-then-else~, such as
#+begin_src scheme
  (if (<predicate>)
      <consequent>
      <alternate>)
#+end_src
if the predicate evaluates as true, the ~if~ returns the consequent expression as its value, otherwise
the alternate expression is returned.
Multiple conditions may be tested in an ~if-elseif-else~ form, expressed in Lisp using ~cond~
#+begin_src scheme
  (cond (<predicate-1>
         <body-1>)
        (<predicate-2>
         <body-2>)
        ...
        (<predicate-n>
         <body-n>))
#+end_src
From the discussion above, it is clear that ~if~ and ~cond~ are both [[*Special forms][special forms]], only the body
returned by a true predicate is evaluated.

Without case analysis the procedures that may be defined are relatively limited, with case analysis
it becomes possible to develop much more complex procedures.

**** Recursive procedures and looping

A procedure might be [[file:202101311105.org][defined]] in terms of itself as a form of looping, /e.g./
#+begin_src scheme
  (define (infinite-loop)
    (inifinite-loop))
#+end_src
will call itself in an infinite loop - not very useful!
Case analysis is the means to implement a stopping condition, as an example application, counting to
$n$ could be implemented as
#+begin_src scheme
  (define (count n)
    (count-iter 0 n))

  (define (count-iter s n)
    (if (= 0 n)
        s
        (count-iter (1+ s) (1- n))))
#+end_src

* Black box abstraction

Black box abstraction encapsulates complexity in a box, [[*Means of abstraction][hiding it behind a name]], the contents of
which needn't be understood to make use of it, simply it is expected to perform some particular task
such as providing a value for \pi or /e.g./ given a procedure ~SQRT~ for computing square roots, we expect
it to behave as
\begin{equation}
  x \rightarrow SQRT \rightarrow y=\sqrt{x} \ ,
\end{equation}
/how/ it computes the square root doesn't matter.
Once defined black boxes can be treated as primitive and combined to form larger, more complex black
boxes, raising the level of abstraction; this process can be continued at the new level of
abstraction and so on to build large, complex systems from smaller components.

** Procedural abstraction

Black box abstractions facilitate building large complex systems from smaller components which
/modularise/ common ideas.
For instance, to compute the area of a circle you square the radius and multiply this by \pi, a
straightforward definition of this procedure is given in listing\nbsp[[src:area_circle.scm]].

#+CAPTION: A procedure to compute the area of a circle
#+NAME: src:area_circle.scm
#+begin_src scheme
  (define (circle-area r)
    (* 3.14 (* r r)))
#+end_src

Whilst such a straightforward procedure is easy to understand, it doesn't /express/ clearly what is
being done, listing\nbsp[[src:area_circle_modular.scm]] demonstrates a better approach based on /procedural
abstraction/ to replace the action of squaring a number with a procedure that achieves the same.
The result is a procedure that is easier to understand because the implementation details of how to
square a number have been suppressed by the ~square~ abstraction, from the perspective of ~circle-area~
any procedure that computes the square is equally good and by abstracting away the squaring process
it becomes possible to replace it with a more efficient implementation without changing the
definition of ~circle-area~. 

#+CAPTION: Computing the area of a circle using procedural abstraction
#+NAME: src:area_circle_modular.scm
#+begin_src scheme
  (define (circle-area r)
    (* 3.14 (square r)))
#+end_src

*** A procedure for procedural abstraction

Listing\nbsp[[src:area_circle_modular.scm]] demonstrates the application of procedural abstraction to the
original procedure definition given in listing\nbsp[[src:area_circle.scm]], improving its legibility by
capturing the concept of /squaring things/ in the ~square~ procedure (which can likely be reused
elsewhere) and suppressing the detail of its implementation in an [[file:202101302251.org][abstraction]].

Procedural abstraction can be achieved by applying a relatively straightforward procedure
cite:Grimson2004b:
1) Identify sub=tasks within the computational process, these can be isolated as /modules/
2) Develop a /procedural abstraction/ for each module
3) Create a procedure to direct the interaction of these modules through their procedural
   abstractions
4) Apply steps 1-3 to each identified module

** Block structuring

When building a complex procedure making use of procedural abstraction, the names given for some or
all of the modules may express concepts that are of wider use, but whose details are specific to the
procedure at hand.
To illustrate this consider the implementation of Heron's method in listing\nbsp[[src:herons-method.scm]],
the concepts of testing if a guess is good enough, or improving a guess would equally be applicable
to a related procedure for finding cube roots, however an implementer of this procedure would have
to find new names for these sub-procedures.

#+CAPTION: An implementation of Heron's method
#+NAME: src:herons-method.scm
#+begin_src scheme
  (define (herons-root x)
    (try 1.0 x))

  (define (try guess x)
    (if (good-enough? guess x)
        guess
        (try (improve-guess guess x) x)))

  (define (good-enough? guess x)
    (< (abs (- (square guess) x))
       0.001))

  (define (improve-guess guess x)
    (/ (+ guess (/ x guess))
       2))
#+end_src

It would be better if procedural abstractions specific to a particular procedure did not pollute the
namespace and therefore affect the work of others.
This can be achieved by /block structuring/ the code, defining sub-modules as part of the definition
of the procedure being developed as shown in listing\nbsp[[src:herons-method-bs.scm]].

#+CAPTION: A block-structured implemenation of Heron's method
#+NAME: src:herons-method-bs.scm
#+begin_src scheme
  (define (herons-root-blockstruct x)
    (define (good-enough? guess)
      (< (abs (- (square guess) x))
         0.001))
    (define (improve-guess guess)
      (/ (+ guess (/ x guess))
         2))
    (define (try guess)
      (if (good-enough? guess)
          guess
          (try (improve-guess guess))))
    (try 1.0))
#+end_src

If the language is /lexically scoped/ (as most Lisps are), this can also simplify the implementation
of sub-modules, as shown in listing\nbsp[[src:herons-method-bs.scm]] ~x~ needn't be passed to them, rather it
is left as a free variable and takes its value from the enclosing scope of ~herons-root~; note that
~square~ is a procedural abstraction of a general concept and so is assumed to be defined somewhere
externally to ~herons-root~.

* Exercises
* References
:PROPERTIES:
:UNNUMBERED: t
:END:

bibliographystyle:unsrt
bibliography:~/Documents/library.bib

